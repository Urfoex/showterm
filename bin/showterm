#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path('../lib', File.dirname(__FILE__))

require 'optparse'
require 'showterm'
require 'showterm/version'

class Showterm::Main

  def run
    @action = :record_and_upload
    @ask_before_upload = false
    @edit_timings = false
    @save_only = false

    option_parser.parse! ARGV
    send @action
  end

  def option_parser
    @option_parser ||= OptionParser.new do |opts|
      opts.version = Showterm::Version::STRING

      opts.summary_width = 20
      opts.summary_indent = '  '


      # newline + pad to align option descriptions
      nl = "\n#{' ' * (opts.summary_width + 3)}"

      opts.banner = <<EOF
showterm will record the exact output of your session,
and upload it to the internet where it can be replayed
by anyone to whom you give the URL.

EOF

      opts.define_head "Usage: #{opts.program_name} [-a] [-e] <command to run>"

      opts.separator ''
      opts.separator 'Recording Options:'

      opts.on("-a", "--ask", "Ask for confirmation before uploading") do |value|
        @ask_before_upload = true
      end

      opts.on("-e", "--edit", "Edit the timings file before uploading. This can#{nl}be nice if you want to take long pauses (such as#{nl}searching an answer out) in between commands.") do
        @edit_timings = true
      end

      opts.on("-s", "--save", "Save the recording locally instead of uploading.#{nl}Afterwords, use --retry to finish the upload.") do
        @save_only = true
      end

      opts.on("-r", "--retry", "Attempt an upload again (args: <script> <times>)") do
        opts.terminate
        @action = :retry
      end

      opts.separator ''
      opts.separator 'Other Options:'

      opts.on("-h", "--help", "Show this message") do
        puts opts
        exit
      end

      opts.on("-v", "--version", "Show Version") do
        puts opts.ver
        exit
      end

    end
  end

  def ask_yesno(*args)
    print(*args)
    print(" [y/N] ")
    case $stdin.gets
    when /^y$/, /^yes$/
      true
    else
      false
    end
  end

  def record_and_upload
    sf, tf = record

    if @save_only
      die_politely "Saving recording (no upload)", sf, tf
    end

    sf, tf = edit(sf, tf) if @edit_timings

    if @ask_before_upload
      unless ask_yesno("Upload?")
        die_politely "Upload canceled!", sf, tf
      end
    end

    upload sf, tf
  end

  def record
    puts 'showterm recording. (Exit shell when done.)'
    sf, tf = Showterm.record!(*ARGV)
    puts 'showterm recording finished.'
    [sf, tf]
  end

  def reupload
    if ARGV.size == 2
      upload(*ARGV.map{ |path| File.read(path) })
    else
      puts "Usage: showterm --retry <scriptfile> <timesfile>"
    end
  end

  def upload(sf, tf)
    puts "Uploading..."
    puts Showterm.upload! sf, tf
  rescue => e
    puts [e] + e.backtrace
    puts "-" * 80
    die_politely "DON'T PANIC", sf, tf
  end

  def edit(sf, tf)
    prepare_to_edit

    times_path = save 'times', tf
    success = system(editor, times_path)
    if success
      tf = File.read(times_path)
    else
      die_politely "OK, discarding edits and skipping upload.", sf, tf
    end

    [sf, tf]
  end

  def prepare_to_edit
    puts "Recording done, now it's time to dress up those timings!" +
         if 'vim' == editor
           <<-TIPS
             Hot vim tips:

             Use :cq  from vim to exit nonzero, and cancel the upload
             Use :%s/^[0-9]\./0./  to get rid of all longish pauses.
           TIPS
         else
           "If you can make your editor return nonzero, it will cancel the upload."
         end +
         "[Hit Enter to edit]"

    $stdin.readline
  end

  def save(which, data)
    path = "/tmp/showtime.#$$.#{which}"
    File.open(path, 'w') do |f|
      f.write(data)
    end
    path
  end

  def die_politely(message, sf, tf)
    script_path = save 'script', sf
    times_path = save 'times', tf
    puts <<-MESSAGE
      #{message}
      your work is safe in "#{script_path}" and "#{times_path}"
      To try uploading manually, use:
      showterm --retry "#{script_path}" "#{times_path}"
    MESSAGE
    exit 1
  end

  def dedent(str)
    str.split("\n").map(&:lstrip).join("\n")
  end

  def puts(str, *a)
    super(String === str ? dedent(str) : str, *a)
  end

  def editor
    ENV.fetch('VISUAL', ENV.fetch('EDITOR', 'vim'))
  end
end

Showterm::Main.new.run
